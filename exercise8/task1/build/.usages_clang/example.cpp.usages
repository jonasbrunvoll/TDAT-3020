22 serialization::archive 17 0 0 0 0 42 /Users/jonaslarsson/jucipp/openssl-example 48 /Users/jonaslarsson/jucipp/openssl-example/build 0 0 429 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 7 cstring 1 11 1 18 18446744073709551615 1 > 1 18 1 19 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 7 iomanip 2 11 2 18 18446744073709551615 1 > 2 18 2 19 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 8 iostream 3 11 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 3 evp 4 19 4 22 18446744073709551615 1 . 4 22 4 23 18446744073709551615 1 h 4 23 4 24 18446744073709551615 1 > 4 24 4 25 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 7 openssl 5 11 5 18 18446744073709551615 1 / 5 18 5 19 18446744073709551615 3 sha 5 19 5 22 18446744073709551615 1 . 5 22 5 23 18446744073709551615 1 h 5 23 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 7 sstream 6 11 6 18 18446744073709551615 1 > 6 18 6 19 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 6 string 7 11 7 17 18446744073709551615 1 > 7 17 7 18 18446744073709551615 49 /// Return hex string from bytes in input string. 10 1 10 50 18446744073709551615 6 static 11 1 11 7 18446744073709551615 3 std 11 8 11 11 0 2 :: 11 11 11 13 1 6 string 11 13 11 19 2 3 hex 11 20 11 23 1 1 ( 11 23 11 24 1 5 const 11 24 11 29 18446744073709551615 3 std 11 30 11 33 0 2 :: 11 33 11 35 18446744073709551615 6 string 11 35 11 41 2 1 & 11 42 11 43 18446744073709551615 5 input 11 43 11 48 3 1 ) 11 48 11 49 1 1 { 11 50 11 51 18446744073709551615 3 std 12 3 12 6 0 2 :: 12 6 12 8 18446744073709551615 12 stringstream 12 8 12 20 4 10 hex_stream 12 21 12 31 5 1 ; 12 31 12 32 18446744073709551615 10 hex_stream 13 3 13 13 5 2 << 13 14 13 16 6 3 std 13 17 13 20 0 2 :: 13 20 13 22 7 3 hex 13 22 13 25 7 2 << 13 26 13 28 6 3 std 13 29 13 32 0 2 :: 13 32 13 34 8 8 internal 13 34 13 42 8 2 << 13 43 13 45 9 3 std 13 46 13 49 0 2 :: 13 49 13 51 10 7 setfill 13 51 13 58 10 1 ( 13 58 13 59 10 3 '0' 13 59 13 62 18446744073709551615 1 ) 13 62 13 63 10 1 ; 13 63 13 64 18446744073709551615 3 for 14 3 14 6 18446744073709551615 1 ( 14 7 14 8 18446744073709551615 4 auto 14 8 14 12 18446744073709551615 1 & 14 13 14 14 18446744073709551615 4 byte 14 14 14 18 11 1 : 14 19 14 20 12 5 input 14 21 14 26 3 1 ) 14 26 14 27 18446744073709551615 10 hex_stream 15 5 15 15 5 2 << 15 16 15 18 9 3 std 15 19 15 22 0 2 :: 15 22 15 24 13 4 setw 15 24 15 28 13 1 ( 15 28 15 29 13 1 2 15 29 15 30 18446744073709551615 1 ) 15 30 15 31 13 2 << 15 32 15 34 6 1 ( 15 35 15 36 18446744073709551615 3 int 15 36 15 39 18446744073709551615 1 ) 15 39 15 40 18446744073709551615 1 ( 15 40 15 41 18446744073709551615 8 unsigned 15 41 15 49 18446744073709551615 4 char 15 50 15 54 18446744073709551615 1 ) 15 54 15 55 18446744073709551615 4 byte 15 55 15 59 11 1 ; 15 59 15 60 18446744073709551615 6 return 16 3 16 9 18446744073709551615 10 hex_stream 16 10 16 20 5 1 . 16 20 16 21 14 3 str 16 21 16 24 14 1 ( 16 24 16 25 14 1 ) 16 25 16 26 14 1 ; 16 26 16 27 18446744073709551615 1 } 17 1 17 2 18446744073709551615 74 /// Return key from the Password-Based Key Derivation Function 2 (PBKDF2). 20 1 20 75 18446744073709551615 6 static 21 1 21 7 18446744073709551615 3 std 21 8 21 11 0 2 :: 21 11 21 13 15 6 string 21 13 21 19 2 6 pbkdf2 21 20 21 26 15 1 ( 21 26 21 27 15 5 const 21 27 21 32 18446744073709551615 3 std 21 33 21 36 0 2 :: 21 36 21 38 18446744073709551615 6 string 21 38 21 44 2 8 password 21 45 21 53 16 1 , 21 53 21 54 15 5 const 21 55 21 60 18446744073709551615 3 std 21 61 21 64 0 2 :: 21 64 21 66 18446744073709551615 6 string 21 66 21 72 2 4 salt 21 73 21 77 17 1 , 21 77 21 78 15 3 int 21 79 21 82 18446744073709551615 10 iterations 21 83 21 93 18 1 , 21 93 21 94 15 3 int 21 95 21 98 18446744073709551615 11 hash_length 21 99 21 110 19 1 ) 21 110 21 111 15 1 { 21 112 21 113 18446744073709551615 3 std 22 3 22 6 0 2 :: 22 6 22 8 18446744073709551615 6 string 22 8 22 14 2 4 hash 22 15 22 19 20 1 ; 22 19 22 20 18446744073709551615 15 ///Empty string 22 29 22 44 18446744073709551615 4 hash 23 3 23 7 20 1 . 23 7 23 8 21 6 resize 23 8 23 14 21 1 ( 23 14 23 15 21 11 hash_length 23 15 23 26 19 1 ) 23 26 23 27 21 1 ; 23 27 23 28 18446744073709551615 35 ///Defines correct length of string 23 29 23 64 18446744073709551615 28 /// Adds data to hash string 25 3 25 31 18446744073709551615 4 auto 26 3 26 7 18446744073709551615 7 success 26 8 26 15 22 1 = 26 16 26 17 18446744073709551615 22 PKCS5_PBKDF2_HMAC_SHA1 26 18 26 40 23 1 ( 26 40 26 41 23 8 password 26 41 26 49 16 1 . 26 49 26 50 24 4 data 26 50 26 54 24 1 ( 26 54 26 55 24 1 ) 26 55 26 56 24 1 , 26 56 26 57 23 8 password 26 58 26 66 16 1 . 26 66 26 67 25 4 size 26 67 26 71 25 1 ( 26 71 26 72 25 1 ) 26 72 26 73 25 1 , 26 73 26 74 23 1 ( 27 41 27 42 18446744073709551615 5 const 27 42 27 47 18446744073709551615 8 unsigned 27 48 27 56 18446744073709551615 4 char 27 57 27 61 18446744073709551615 1 * 27 62 27 63 18446744073709551615 1 ) 27 63 27 64 18446744073709551615 4 salt 27 64 27 68 17 1 . 27 68 27 69 24 4 data 27 69 27 73 24 1 ( 27 73 27 74 24 1 ) 27 74 27 75 24 1 , 27 75 27 76 23 4 salt 27 77 27 81 17 1 . 27 81 27 82 25 4 size 27 82 27 86 25 1 ( 27 86 27 87 25 1 ) 27 87 27 88 25 1 , 27 88 27 89 23 10 iterations 27 90 27 100 18 1 , 27 100 27 101 23 11 hash_length 28 41 28 52 19 1 , 28 52 28 53 23 1 ( 28 54 28 55 18446744073709551615 8 unsigned 28 55 28 63 18446744073709551615 4 char 28 64 28 68 18446744073709551615 1 * 28 69 28 70 18446744073709551615 1 ) 28 70 28 71 18446744073709551615 4 hash 28 71 28 75 20 1 . 28 75 28 76 24 4 data 28 76 28 80 24 1 ( 28 80 28 81 24 1 ) 28 81 28 82 24 1 ) 28 82 28 83 23 1 ; 28 83 28 84 18446744073709551615 2 if 29 3 29 5 18446744073709551615 1 ( 29 6 29 7 18446744073709551615 1 ! 29 7 29 8 18446744073709551615 7 success 29 8 29 15 22 1 ) 29 15 29 16 18446744073709551615 5 throw 30 5 30 10 18446744073709551615 3 std 30 11 30 14 0 2 :: 30 14 30 16 18446744073709551615 13 runtime_error 30 16 30 29 26 1 ( 30 29 30 30 26 48 "openssl: error calling PBKCS5_PBKDF2_HMAC_SHA1" 30 30 30 78 18446744073709551615 1 ) 30 78 30 79 26 1 ; 30 79 30 80 18446744073709551615 6 return 32 3 32 9 18446744073709551615 4 hash 32 10 32 14 20 1 ; 32 14 32 15 18446744073709551615 1 } 33 1 33 2 18446744073709551615 3 int 36 1 36 4 18446744073709551615 4 main 36 5 36 9 27 1 ( 36 9 36 10 27 1 ) 36 10 36 11 27 1 { 36 12 36 13 18446744073709551615 31 //std::string password = "QwE"; 38 3 38 34 18446744073709551615 3 std 39 3 39 6 0 2 :: 39 6 39 8 18446744073709551615 6 string 39 8 39 14 2 7 keyHash 39 15 39 22 28 1 = 39 23 39 24 18446744073709551615 42 "ab29d7b5c589e18b52261ecba1d3a7e7cbf212c6" 39 25 39 67 18446744073709551615 1 ; 39 67 39 68 18446744073709551615 3 std 40 3 40 6 0 2 :: 40 6 40 8 18446744073709551615 6 string 40 8 40 14 2 4 salt 40 15 40 19 29 1 = 40 20 40 21 18446744073709551615 16 "Saltet til Ola" 40 22 40 38 18446744073709551615 1 ; 40 38 40 39 18446744073709551615 3 int 41 3 41 6 18446744073709551615 10 iterations 41 7 41 17 30 1 = 41 18 41 19 18446744073709551615 4 2048 41 20 41 24 18446744073709551615 1 ; 41 24 41 25 18446744073709551615 3 int 42 3 42 6 18446744073709551615 9 keyLength 42 7 42 16 31 1 = 42 17 42 18 18446744073709551615 3 160 42 19 42 22 18446744073709551615 1 / 42 23 42 24 18446744073709551615 1 8 42 25 42 26 18446744073709551615 1 ; 42 26 42 27 18446744073709551615 3 int 45 3 45 6 18446744073709551615 9 num_ascii 45 7 45 16 32 1 = 45 17 45 18 18446744073709551615 3 128 45 19 45 22 18446744073709551615 1 ; 45 22 45 23 18446744073709551615 39 /// number of possible ascii characters 45 24 45 63 18446744073709551615 3 std 47 3 47 6 0 2 :: 47 6 47 8 18446744073709551615 6 string 47 8 47 14 2 12 testPassword 47 15 47 27 33 1 ; 47 27 47 28 18446744073709551615 3 std 48 3 48 6 0 2 :: 48 6 48 8 18446744073709551615 6 string 48 8 48 14 2 4 hash 48 15 48 19 34 1 ; 48 19 48 20 18446744073709551615 5 while 50 3 50 8 18446744073709551615 1 ( 50 9 50 10 18446744073709551615 4 true 50 10 50 14 18446744073709551615 1 ) 50 14 50 15 18446744073709551615 1 { 50 16 50 17 18446744073709551615 3 for 51 5 51 8 18446744073709551615 1 ( 51 9 51 10 18446744073709551615 3 int 51 10 51 13 18446744073709551615 5 char1 51 14 51 19 35 1 = 51 20 51 21 18446744073709551615 2 65 51 22 51 24 18446744073709551615 1 ; 51 24 51 25 18446744073709551615 5 char1 51 26 51 31 35 1 < 51 32 51 33 18446744073709551615 9 num_ascii 51 34 51 43 32 1 ; 51 43 51 44 18446744073709551615 5 char1 51 45 51 50 35 2 ++ 51 50 51 52 18446744073709551615 1 ) 51 52 51 53 18446744073709551615 1 { 51 54 51 55 18446744073709551615 3 for 52 7 52 10 18446744073709551615 1 ( 52 11 52 12 18446744073709551615 3 int 52 12 52 15 18446744073709551615 5 char2 52 16 52 21 36 1 = 52 22 52 23 18446744073709551615 2 65 52 24 52 26 18446744073709551615 1 ; 52 26 52 27 18446744073709551615 5 char2 52 28 52 33 36 1 < 52 34 52 35 18446744073709551615 9 num_ascii 52 36 52 45 32 1 ; 52 45 52 46 18446744073709551615 5 char2 52 47 52 52 36 2 ++ 52 52 52 54 18446744073709551615 1 ) 52 54 52 55 18446744073709551615 1 { 52 56 52 57 18446744073709551615 3 for 53 9 53 12 18446744073709551615 1 ( 53 13 53 14 18446744073709551615 3 int 53 14 53 17 18446744073709551615 5 char3 53 18 53 23 37 1 = 53 24 53 25 18446744073709551615 2 65 53 26 53 28 18446744073709551615 1 ; 53 28 53 29 18446744073709551615 5 char3 53 30 53 35 37 1 < 53 36 53 37 18446744073709551615 9 num_ascii 53 38 53 47 32 1 ; 53 47 53 48 18446744073709551615 5 char3 53 49 53 54 37 2 ++ 53 54 53 56 18446744073709551615 1 ) 53 56 53 57 18446744073709551615 1 { 53 58 53 59 18446744073709551615 57 // convert each digit to char and concatenate into string 55 11 55 68 18446744073709551615 12 testPassword 56 11 56 23 33 1 = 56 24 56 25 38 3 std 56 26 56 29 0 2 :: 56 29 56 31 39 6 string 56 31 56 37 2 1 ( 56 37 56 38 39 1 ) 56 38 56 39 39 1 + 56 40 56 41 40 1 ( 56 42 56 43 18446744073709551615 4 char 56 43 56 47 18446744073709551615 1 ) 56 47 56 48 18446744073709551615 5 char1 56 48 56 53 35 1 + 56 54 56 55 40 1 ( 56 56 56 57 18446744073709551615 4 char 56 57 56 61 18446744073709551615 1 ) 56 61 56 62 18446744073709551615 5 char2 56 62 56 67 36 1 + 56 68 56 69 40 1 ( 56 70 56 71 18446744073709551615 4 char 56 71 56 75 18446744073709551615 1 ) 56 75 56 76 18446744073709551615 5 char3 56 76 56 81 37 1 ; 56 81 56 82 18446744073709551615 33 //Generates hash to test password 58 11 58 44 18446744073709551615 4 hash 59 11 59 15 34 1 = 59 16 59 17 38 3 hex 59 18 59 21 1 1 ( 59 21 59 22 1 6 pbkdf2 59 22 59 28 15 1 ( 59 28 59 29 15 12 testPassword 59 29 59 41 33 1 , 59 41 59 42 15 4 salt 59 43 59 47 29 1 , 59 47 59 48 15 10 iterations 59 49 59 59 30 1 , 59 59 59 60 15 9 keyLength 59 61 59 70 31 1 ) 59 70 59 71 15 1 ) 59 71 59 72 1 1 ; 59 72 59 73 18446744073709551615 3 std 60 11 60 14 0 2 :: 60 14 60 16 18446744073709551615 4 cout 60 16 60 20 41 2 << 60 21 60 23 9 17 "Test password: " 60 24 60 41 18446744073709551615 2 << 60 42 60 44 9 12 testPassword 60 45 60 57 33 2 << 60 58 60 60 9 21 ".  Hash generated: " 60 61 60 82 18446744073709551615 2 << 60 83 60 85 9 4 hash 60 86 60 90 34 2 << 60 91 60 93 6 3 std 60 94 60 97 0 2 :: 60 97 60 99 42 4 endl 60 99 60 103 42 1 ; 60 103 60 104 18446744073709551615 26 //Finds the matching hash. 62 11 62 37 18446744073709551615 2 if 63 11 63 13 18446744073709551615 1 ( 63 14 63 15 18446744073709551615 7 keyHash 63 15 63 22 28 2 == 63 23 63 25 43 4 hash 63 26 63 30 34 1 ) 63 30 63 31 18446744073709551615 1 { 63 32 63 33 18446744073709551615 3 std 64 13 64 16 0 2 :: 64 16 64 18 18446744073709551615 4 cout 64 18 64 22 41 2 << 64 23 64 25 6 3 std 64 26 64 29 0 2 :: 64 29 64 31 42 4 endl 64 31 64 35 42 1 ; 64 35 64 36 18446744073709551615 3 std 65 13 65 16 0 2 :: 65 16 65 18 18446744073709551615 4 cout 65 18 65 22 41 2 << 65 23 65 25 9 17 "The password: '" 65 26 65 43 18446744073709551615 2 << 65 44 65 46 9 12 testPassword 65 47 65 59 33 2 << 65 60 65 62 9 19 "' and the salt: '" 65 63 65 82 18446744073709551615 2 << 65 83 65 85 9 4 salt 65 86 65 90 29 2 << 65 91 65 93 9 31 "' generates the hashed key: '" 65 94 65 125 18446744073709551615 2 << 65 126 65 128 9 4 hash 65 129 65 133 34 2 << 65 134 65 136 9 4 "'." 65 137 65 141 18446744073709551615 2 << 65 142 65 144 6 3 std 65 145 65 148 0 2 :: 65 148 65 150 42 4 endl 65 150 65 154 42 1 ; 65 154 65 155 18446744073709551615 6 return 66 13 66 19 18446744073709551615 1 0 66 20 66 21 18446744073709551615 1 ; 66 21 66 22 18446744073709551615 1 } 67 11 67 12 18446744073709551615 1 } 68 9 68 10 18446744073709551615 1 } 69 7 69 8 18446744073709551615 1 } 70 5 70 6 18446744073709551615 1 } 71 3 71 4 18446744073709551615 476 /*

  char password[3];

  for (char c1 : alphabet) {
    password[0] = c1;

    for (char c2 : alphabet) {
      password[1] = c2;

      for (char c3 : alphabet) {
        password[2] = c3;
        std::string hash = hex(pbkdf2(password, salt, iterations, keyLength));
        std::cout << hash + ": " + password << std::endl;
        if (hash == key) {
          std::cout << "Password found: " << password << std::endl;
          return 0;
        }
      }
    }
  }
  */ 73 3 94 5 18446744073709551615 6 return 97 3 97 9 18446744073709551615 1 0 97 10 97 11 18446744073709551615 1 ; 97 11 97 12 18446744073709551615 1 } 98 1 98 2 18446744073709551615 0 0 44 0 0 0 22 0 0 1 2 0 3 std 8 1 2 0 3 hex 20 1 2 0 14 string:__1:std 10 1 2 0 60 11:43:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 20 1 2 0 20 stringstream:__1:std 9 1 2 0 60 12:21:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 11 hex:__1:std 8 1 2 0 16 internal:__1:std 8 1 2 0 16 operator:__1:std 8 1 2 0 15 setfill:__1:std 9 1 2 0 60 14:14:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 21 1 2 0 29 operator*:__wrap_iter:__1:std 8 1 2 0 12 setw:__1:std 21 1 2 0 30 str:basic_stringstream:__1:std 8 1 2 0 6 pbkdf2 10 1 2 0 60 21:45:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 10 1 2 0 60 21:73:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 10 1 2 0 60 21:83:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 10 1 2 0 60 21:99:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 60 22:15:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 21 1 2 0 27 resize:basic_string:__1:std 9 1 2 0 59 26:8:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 8 1 2 0 22 PKCS5_PBKDF2_HMAC_SHA1 21 1 2 0 25 data:basic_string:__1:std 21 1 2 0 25 size:basic_string:__1:std 4 1 2 0 17 runtime_error:std 8 1 2 0 4 main 9 1 2 0 60 39:15:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 60 40:15:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 59 41:7:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 59 42:7:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 59 45:7:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 60 47:15:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 60 48:15:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 60 51:14:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 60 52:16:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 9 1 2 0 60 53:18:/Users/jonaslarsson/jucipp/openssl-example/example.cpp 21 1 2 0 30 operator=:basic_string:__1:std 24 1 2 0 20 basic_string:__1:std 8 1 2 0 17 operator+:__1:std 9 1 2 0 12 cout:__1:std 8 1 2 0 12 endl:__1:std 8 1 2 0 18 operator==:__1:std 0 0 1 0 0 0 54 /Users/jonaslarsson/jucipp/openssl-example/example.cpp 1600195059